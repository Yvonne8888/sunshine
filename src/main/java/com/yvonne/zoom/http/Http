Http超文本传输协议
    明文传输，端口默默人80，三次握手
    http的长连接和短连接 {
        HTTP1.1默认保持长连接（HTTP persistent connection），数据传输完成了保持TCP连接不断开（不发RST包、不四次握手），
            等待在同域名下继续用这个通道传输数据。
            cookie信息管理状态，第一次连接：客户端向服务端发送请求，服务端响应生成cookie并且一起返回，客户端保存cookie；
            第二次连接：客户端发送请求带上cookie发送给服务端，服务端响应检查cookie。
        HTTP1.0默认保持短连接。浏览器和服务器每次进行HTTP操作，就建立一次连接，任务结束就终端连接。
    }
    http的重定向和请求转发 {
        本质区别：转发是服务器行为，重定向是客户端行为。
        重定向：两次请求，浏览器地址发生变化，可以访问自己web之外的资源，传输的数据会丢失。
        转发：一次请求，浏览器地址不变，可以访问的是自己本身的web资源，传输的数据不会丢失。
    }

Https超文本传输安全协议
    Http+SSL/TLS加密数据包，加密传输，端口默认443，三次握手+SSL/TLS握手
    加解密流程 {
        1.用户在浏览器发起HTTPS请求（如 https://www.mogu.com/），默认使用服务端的443端口进行连接；
        2.HTTPS需要使用一套CA数字证书，证书内会附带一个公钥Pub，而与之对应的私钥Private保留在服务端不公开；
        3.服务端收到请求，返回配置好的包含公钥Pub的证书给客户端；
        4.客户端收到证书，校验合法性，主要包括是否在有效期内、证书的域名与请求的域名是否匹配，上一级证书是否有效
            （递归判断，直到判断到系统内置或浏览器配置好的根证书），如果不通过，则显示HTTPS警告信息，如果通过则继续；
        5.客户端生成一个用于对称加密的随机Key，并用证书内的公钥Pub进行加密，发送给服务端；
        6.服务端收到随机Key的密文，使用与公钥Pub配对的私钥Private进行解密，得到客户端真正想发送的随机Key；
        7.服务端使用客户端发送过来的随机Key对要传输的HTTP数据进行对称加密，将密文返回客户端；
        8.客户端使用随机Key对称解密密文，得到HTTP数据明文；
        9.后续HTTPS请求使用之前交换好的随机Key进行对称加解密。
    }

